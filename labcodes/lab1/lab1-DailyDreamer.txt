Lab1 Report
计24 李心成 2012012057

练习1

1.1
执行make V= 观察输出后再makefile中寻找相关命令：
# create ucore.img
UCOREIMG	:= $(call totarget,ucore.img)

$(UCOREIMG): $(kernel) $(bootblock)
	$(V)dd if=/dev/zero of=$@ count=10000
	$(V)dd if=$(bootblock) of=$@ conv=notrunc
	$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc
生成了ucore.img，需要bootblock和kernel
展开后宏命令如下：
dd if=/dev/zero of=bin/ucore.img count=10000
生成一个有10000个块的文件，每个块默认512字节，用0填充
dd if=bin/bootblock of=bin/ucore.img conv=notrunc
把bootblock中的内容写到第一个块
dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc
把kernel中的内容写入第二个块

# create bootblock

bootblock = $(call totarget,bootblock)

$(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign)
	@echo + ld $@
	$(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ -o $(call toobj,bootblock)
	@$(OBJDUMP) -S $(call objfile,bootblock) > $(call asmfile,bootblock)
	@$(OBJCOPY) -S -O binary $(call objfile,bootblock) $(call outfile,bootblock)
	@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)
生成了bootblock，需要bootasm.o、bootmain.o、sign
展开宏如下：
ld -m elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o
生成bootblock.o，需要bootasm.o、bootmain.o
参数含义
-m <emulation>  模拟为i386上的连接器
-nostdlib  不使用标准库
-N  设置代码段和数据段均可读写
-e <entry>  指定入口
-Ttext  制定代码段开始位置
objcopy -S -O binary obj/bootblock.o obj/bootblock.out
拷贝二进制代码bootblock.o到bootblock.out
参数如下
-S  移除所有符号和重定位信息
-O <bfdname>  指定输出格式
bin/sign obj/bootblock.out bin/bootblock
使用sign工具处理bootblock.out，生成bootblock

# create kernel target
kernel = $(call totarget,kernel)

$(kernel): tools/kernel.ld

$(kernel): $(KOBJS)
	@echo + ld $@
	$(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS)
	@$(OBJDUMP) -S $@ > $(call asmfile,kernel)
	@$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $(call symfile,kernel)

生成了kernel，需要 kernel.ld init.o readline.o stdio.o kdebug.o kmonitor.o panic.o clock.o console.o intr.o picirq.o trap.o trapentry.o vectors.o pmm.o  printfmt.o string.o，kernel.ld已存在
ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/trap/trap.o obj/kern/trap/trapentry.o obj/kern/trap/vectors.o obj/kern/mm/pmm.o obj/libs/printfmt.o obj/libs/string.o
参数如下
-T <scriptfile>  让连接器使用指定的脚本

bootfiles = $(call listf_cc,boot)
$(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),$(CFLAGS) -Os -nostdinc))

生成bootasm.o，需要bootasm.S
展开宏后命令为gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o
参数含义如下
-ggdb  生成可供gdb使用的调试信息
-m32  生成适用于32位环境的代码
-gstabs  生成stabs格式的调试信息
-nostdinc  不使用标准库
-fno-stack-protector  不生成用于检测缓冲区溢出的代码
-Os  为减小代码大小而进行优化
-I<dir>  添加搜索头文件的路径

生成bootmain.o，需要bootmain.c
展开宏后命令为gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o
参数含义
-fno-builtin  除非用__builtin_前缀，否则不进行builtin函数的优化

$(call add_files_host,tools/sign.c,sign,sign)
$(call create_target_host,sign,sign)
生成sign
展开宏后命令为
gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o 
gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign

$(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,$(KCFLAGS))
生成kernel需要的.o文件
展开宏命令后形如gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c -o obj/kern/init/init.o

1.2
buf[510] = 0x55;
buf[511] = 0xAA;
即最后两个字节为0x55AA。

练习2

2.1
在Makefile中增加
lab1-exc2: $(UCOREIMG)
	$(V)$(TERMINAL) -e "$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $< -serial null"
	$(V)sleep 2
	$(V)$(TERMINAL) -e "gdb -q -x tools/lab1init"
调用qemu时增加-d in_asm -D q.log参数，便可以将反汇编的指令保存在q.log中。
新建lab1init文件，内容如下：
file bin/kernel
target remote :1234
set architecture i8086
b *0x7c00
continue
x /i $pc

2.2
执行make lab1-exc2
启动后gdb输出
=> 0x7c00:	cli
说明在0x7c00断点正常。

2.3
然后stepi进行单步执行。
q.log中部分指令如下:
IN: 
0x00007c00:  cli    

----------------
IN: 
0x00007c01:  cld    

----------------
IN: 
0x00007c02:  xor    %ax,%ax

----------------
IN: 
0x00007c04:  mov    %ax,%ds
bootblock.asm指令如下：
00007c00 <start>:

# start address should be 0:7c00, in real mode, the beginning address of the running bootloader
.globl start
start:
.code16                                             # Assemble for 16-bit mode
    cli                                             # Disable interrupts
    7c00:	fa                   	cli    
    cld                                             # String operations increment
    7c01:	fc                   	cld    

    # Set up the important data segment registers (DS, ES, SS).
    xorw %ax, %ax                                   # Segment number zero
    7c02:	31 c0                	xor    %eax,%eax
    movw %ax, %ds                                   # -> Data Segment
    7c04:	8e d8                	mov    %eax,%ds
bootasm.S中指令如下：
.code16                                             # Assemble for 16-bit mode
    cli                                             # Disable interrupts
    cld                                             # String operations increment

    # Set up the important data segment registers (DS, ES, SS).
    xorw %ax, %ax                                   # Segment number zero
    movw %ax, %ds                                   # -> Data Segment
可以看出除了多用寄存器长度有差别外基本没有区别。

2.4
b kern_init 在kern_init设置断点
continue后gdb输出
Breakpoint 2, kern_init () at kern/init/init.c:17
17	kern_init(void){
x /i $pc
gdb输出
0x100000 <kern_init>:	push   %bp
说明断点成功。

练习3

CPU加电开始时处于实模式，是处于硬件兼容的考虑。但是实模式只有1MB寻址空间，且没有用户态和内核态的区别，因此需要在bootloader中完成从实模式到保护模式的转换。A20地址线控制禁止时，地址会在20位回绕，因此要进入保护模式，需要先开启A20。
bootasm.S中相关代码如下：
.code16                                             
    cli                                             # 禁止中断
    cld                                             

    # 初始化段寄存器
    xorw %ax, %ax                                   
    movw %ax, %ds                                   
    movw %ax, %es                                   
    movw %ax, %ss                                   

    # 使能 A20:
seta20.1:
    inb $0x64, %al                                  # 等待8042输入缓冲区为空(不忙)
    testb $0x2, %al
    jnz seta20.1

    movb $0xd1, %al                                 # 0xd1赋给0x64端口
    outb %al, $0x64                                 

seta20.2:
    inb $0x64, %al                                  # 等待8042输入缓冲区为空(不忙)
    testb $0x2, %al
    jnz seta20.2

    movb $0xdf, %al                                 # 0xdf赋给0x60端口
    outb %al, $0x60                                 
至此A20开启

    #初始化GDT表：一个简单的GDT表和其描述符已经静态储存在引导区中，载入即可
    lgdt gdtdesc
    #进入保护模式：通过将cr0寄存器PE位置1便开启了保护模式
    movl %cr0, %eax
    orl $CR0_PE_ON, %eax
    movl %eax, %cr0

    #跳转至保护模式
    ljmp $PROT_MODE_CSEG, $protcseg

至此进入保护模式。

练习4

bootmain.c中，readsect读取一个扇区
static void
readsect(void *dst, uint32_t secno) {
    //等待硬盘就绪
    waitdisk();

    outb(0x1F2, 1);                         
    outb(0x1F3, secno & 0xFF);
    outb(0x1F4, (secno >> 8) & 0xFF);
    outb(0x1F5, (secno >> 16) & 0xFF);
    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
    outb(0x1F7, 0x20);                      // 写0x20 代表读扇区
    
    // 等待硬盘就绪
    waitdisk();

    //读入一个扇区
    insl(0x1F0, dst, SECTSIZE / 4);
}

readseg封装了readsect使得能够读入一定字节，不过可能会多读，因为readsect是扇区对齐的
static void
readseg(uintptr_t va, uint32_t count, uint32_t offset) {
    uintptr_t end_va = va + count;

    // 约为扇区边界
    va -= offset % SECTSIZE;

    // 计算所需扇区
    uint32_t secno = (offset / SECTSIZE) + 1;

    for (; va < end_va; va += SECTSIZE, secno ++) {
        readsect((void *)va, secno);
    }
}
然后在bootmain中用readseg读入ELF并完成相应检查

void
bootmain(void) {
    // 读入硬盘第一个页
    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);

    // 检查ELF格式
    if (ELFHDR->e_magic != ELF_MAGIC) {
        goto bad;
    }

    struct proghdr *ph, *eph;

    // 加载每个程序段
    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
    eph = ph + ELFHDR->e_phnum;
    for (; ph < eph; ph ++) {
        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
    }

    // 进入操作系统入口
    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();

bad:
    outw(0x8A00, 0x8A00);
    outw(0x8A00, 0x8E00);

    while (1);
}

正确执行bootmain后就进入了kernel。

练习5

调用read_ebp和read_eip获得ebp和eip寄存器的值，然后在栈深度范围内输出相关信息，参数在ebp+2*4处，ebp和ebp+1*4处存的是caller的ebp和eip。
最后一行输出
ebp:0x00007bf8 eip:0x00007d68 args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8 
    <unknow>: -- 0x00007d67 --
这是bootmain.c中的bootmain，从它开始使用了堆栈。
bootloader设置的堆栈从0x7c00开始，使用"call bootmain"转入bootmain函数。
call指令压栈，所以bootmain中ebp为0x7c00-4 = 0x7bf8。

练习6

6.1
struct gatedesc {
    unsigned gd_off_15_0 : 16;        // low 16 bits of offset in segment
    unsigned gd_ss : 16;            // segment selector
    unsigned gd_args : 5;            // # args, 0 for interrupt/trap gates
    unsigned gd_rsv1 : 3;            // reserved(should be zero I guess)
    unsigned gd_type : 4;            // type(STS_{TG,IG32,TG32})
    unsigned gd_s : 1;                // must be 0 (system)
    unsigned gd_dpl : 2;            // descriptor(meaning new) privilege level
    unsigned gd_p : 1;                // Present
    unsigned gd_off_31_16 : 16;        // high bits of offset in segment
};
这是idt表项结构，其中2-3字节是段选择子，0-1字节和6-7字节分别为低16位和高16位位移，拼起来即是中断处理程序入口地址。

6.2
导入_vectors[]数组，使用SETGATE宏
#define SETGATE(gate, istrap, sel, off, dpl) {            \
    (gate).gd_off_15_0 = (uint32_t)(off) & 0xffff;        \
    (gate).gd_ss = (sel);                                \
    (gate).gd_args = 0;                                    \
    (gate).gd_rsv1 = 0;                                    \
    (gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;    \
    (gate).gd_s = 0;                                    \
    (gate).gd_dpl = (dpl);                                \
    (gate).gd_p = 1;                                    \
    (gate).gd_off_31_16 = (uint32_t)(off) >> 16;        \
}
注意gate是idt表项；istrap看是中断还是异常；sel是段选择子，ucore中直接为GD_KTEXT；off是偏移量，从_vectors[]数组中读取；dpl是设置特权级，从用户态产生的中断要单独设置它。
最后执行lidt指令完成idt初始化。

6.3
较简单，见代码

我的答案基本思路与参考答案一致，只是有一些细节上的东西不尽相同，比如代码中地址加四我使用转化为指针加1而答案转换为数组访问第一个元素等等。
本实验中重要的知识点有对makefile含义的理解，qemu加gdb调试方法，boot过程，读入硬盘文件以及中断机制的建立及中断服务例程的编写。
对应原理中的内容即使实验环境搭建、系统启动流程、中断异常和系统调用。原理中讲得较为理论，而实验中涉及了更多的细节及与硬件相关的东西，同时对于一些原理ucore也做了相应的简化处理。
而原理中的BIOS、内联汇编和系统调用在实验中确实并未体现出来。
